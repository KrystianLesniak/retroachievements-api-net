# yaml-language-server: $schema=https://json.schemastore.org/github-workflow.json

name: Publish
on:
  workflow_dispatch:
  pull_request:
  push:
    branches:
      - 'main'
    paths:
      - src/*
      - src/**
  release:
    types:
      - published

env:
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
  DOTNET_NOLOGO: true
  NuGetDirectory: ${{ github.workspace}}/nuget
  DotNetValidateVersion: 0.0.1-preview.304
  SlnFolderPath: src
  CsProjFilePath: src/RetroAchievements.Api/RetroAchievements.Api.csproj

defaults:
  run:
    shell: pwsh

jobs:
  create_nuget:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0 # Get all history to allow automatic versioning using MinVer

    - name: Setup .NET
      uses: actions/setup-dotnet@v3

    - run: dotnet pack ${{ env.CsProjFilePath }} --configuration Release --output ${{ env.NuGetDirectory }}

    - uses: actions/upload-artifact@v3
      with:
        name: nuget
        if-no-files-found: error
        retention-days: 7
        path: ${{ env.NuGetDirectory }}/*.nupkg

  validate_nuget:
    runs-on: ubuntu-latest
    needs: [ create_nuget ]
    steps:
      - name: Setup .NET
        uses: actions/setup-dotnet@v3

      - uses: actions/download-artifact@v3
        with:
          name: nuget
          path: ${{ env.NuGetDirectory }}

      - name: Install nuget validator
        run: dotnet tool update dotnet-validate --global --version ${{ env.DotNetValidateVersion }}

      - name: Validate package
        run: dotnet validate package local (Get-ChildItem "${{ env.NuGetDirectory }}/*.nupkg")

  run_test_without_api:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
    - name: Run tests
      working-directory: ${{ env.SlnFolderPath }}
      run: |
        dotnet test --configuration Release --filter TestCategory!=ApiTest

  run_full_test:
    # Run API Tests only when creating a GitHub Release
    if: github.event_name == 'release'
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
    - name: Set Secrets
      working-directory: ${{ env.SlnFolderPath }}/Tests/RetroAchievements.Api.Tests.Common
      run: |
        dotnet user-secrets set "Username" "${{ secrets.RA_USERNAME }}"
        dotnet user-secrets set "WebApiKey" "${{ secrets.RA_WEBAPI_KEY }}"
    - name: Setup ReportGenerator
      working-directory: ${{ env.SlnFolderPath }}
      run: dotnet tool install --global dotnet-reportgenerator-globaltool
    - name: Run tests
      working-directory: ${{ env.SlnFolderPath }}
      run: |
        dotnet test --configuration Release --collect:"XPlat Code Coverage"
        reportgenerator -reports:./**/coverage.cobertura.xml -targetdir:./ -reporttypes:lcov
    - name: Publish coverage report to coveralls.io   
      uses: coverallsapp/github-action@master   
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }} 
        path-to-lcov: ${{ env.SlnFolderPath }}/lcov.info 

  deploy:
    # Publish only when creating a GitHub Release
    if: github.event_name == 'release'
    runs-on: ubuntu-latest
    needs: [ validate_nuget, run_full_test ]
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: nuget
          path: ${{ env.NuGetDirectory }}

      - name: Setup .NET Core
        uses: actions/setup-dotnet@v3

      # Use --skip-duplicate to prevent errors if a package with the same version already exists.
      - name: Publish NuGet package
        run: |
          foreach($file in (Get-ChildItem "${{ env.NuGetDirectory }}" -Recurse -Include *.nupkg)) {
              dotnet nuget push $file --api-key "${{ secrets.NUGET_APIKEY }}" --source https://api.nuget.org/v3/index.json --skip-duplicate
          }